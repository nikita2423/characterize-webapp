{"version":3,"sources":["serviceWorker.ts","components/HomePage/HomePage.js","App.js","index.tsx"],"names":["Boolean","window","location","hostname","match","HomePage","successResponseGoogle","response","console","log","failureResponseGoogle","process","react_default","a","createElement","google_login_default","clientId","buttonText","onSuccess","this","onFailure","cookiePolicy","PureComponent","App","components_HomePage_HomePage","history","createBrowserHistory","listen","AppComponent","ReactDOM","render","react_router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2ICkBSC,oNA7BXC,sBAAwB,SAACC,GACrBC,QAAQC,IAAI,WAAWF,MAG3BG,sBAAwB,SAACH,GACrBC,QAAQC,IAAI,WAAWF,4EAMvB,OADAC,QAAQC,IAAIE,sJAERC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACAG,SAAUL,2EACVM,WAAW,QACXC,UAAWC,KAAKb,sBAChBc,UAAWD,KAAKT,sBAChBW,aAAc,gCAtBXC,kBCSRC,mLANX,OACEX,EAAAC,EAAAC,cAACU,EAAD,aAJYF,iBCGZG,EAAUC,cAEhBD,EAAQE,OAAO,SAACzB,MAKhB,IAAmB0B,EAMnBC,IAASC,QANUF,EAMOL,EALxBX,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQN,QAASA,GACfb,EAAAC,EAAAC,cAACc,EAAD,QAI4BI,SAASC,eAAe,SHoHlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a25b95ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport GoogleLogin from 'react-google-login';\n\nimport \"./HomePage.scss\";\n\nclass HomePage extends PureComponent{\n\n    successResponseGoogle = (response) => {\n        console.log(\"success \",response);\n    }\n\n    failureResponseGoogle = (response) => {\n        console.log(\"failure \",response);\n    }\n    \n\n    render(){\n        console.log(process.env)\n        return(\n            <div>\n                <div>Hello Shyam</div>\n                <div>\n                    <GoogleLogin\n                    clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n                    buttonText=\"Login\"\n                    onSuccess={this.successResponseGoogle}\n                    onFailure={this.failureResponseGoogle}\n                    cookiePolicy={'single_host_origin'}\n                    />\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default HomePage;","import React, { PureComponent } from \"react\";\n\nimport \"./styles/scss/index.scss\";\nimport HomePage from \"./components/HomePage\"\n\nclass App extends PureComponent {\n  \n  render() {\n    return (\n      <HomePage />\n    );\n  }\n}\n\nexport default App;","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport App from \"./App\";\nimport ReactGA from \"react-ga\";\n\nconst history = createBrowserHistory();\n\nhistory.listen((location) => {\n  // ReactGA.set({ page: location.hash }); // Update the user's current page\n  // ReactGA.pageview(location.hash); // Record a pageview for the given page\n});\n\nconst ApolloApp = (AppComponent: any) => (\n  <Router history={history}>\n    <AppComponent />\n  </Router>\n);\n\nReactDOM.render(ApolloApp(App), document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}